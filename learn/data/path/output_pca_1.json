[
    {
        "id": 1,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ group(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ represents(?individualD, ?individualE) ^ Block(?individualE) -> relation(?individualA, ?individualE)",
        "count": 7,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|system_of_interest] Spacecraft-Physical"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Scale"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Display"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Signal Processor"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Optical Bench"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 2,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ group(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ partition(?individualE, ?individualD) ^ TestCase(?individualE) ^ group(?individualE, ?individualF) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 22,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|system_of_interest] Spacecraft-Physical"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Scale"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Scale"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|system_of_interest] Spacecraft-Physical"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Signal Processor"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Optical Bench"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Display"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Optical Bench"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Display"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Signal Processor"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Optical Bench"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Display"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Signal Processor"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Display"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Signal Processor"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Optical Bench"
            }
        ]
    },
    {
        "id": 3,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ group(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ partition(?individualE, ?individualD) ^ TestCase(?individualE) ^ partition(?individualE, ?individualF) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 22,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|system_of_interest] Spacecraft-Physical"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Scale"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Scale"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|system_of_interest] Spacecraft-Physical"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Signal Processor"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Optical Bench"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Display"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Optical Bench"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Display"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Signal Processor"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Optical Bench"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Display"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Signal Processor"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Display"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Signal Processor"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Optical Bench"
            }
        ]
    },
    {
        "id": 4,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ group(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ partition(?individualE, ?individualD) ^ TestCase(?individualE) ^ specification(?individualE, ?individualF) ^ TestCase(?individualF) ^ ownedOperation(?individualG, ?individualF) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 8,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [uml:Operation|TestCase] verify mass -> [Block|uml:Class] Verification Context-Mass Properties"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [uml:Operation|TestCase] verify mass -> [Block|uml:Class] Verification Context-Mass Properties"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [uml:Operation|TestCase] verify mass -> [Block|uml:Class] Verification Context-Mass Properties"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [Block|uml:Class] Verification Context-Sensor Performance"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [Block|uml:Class] Verification Context-Sensor Performance"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [Block|uml:Class] Verification Context-Sensor Performance"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [Block|uml:Class] Verification Context-Sensor Performance"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [Block|uml:Class] Verification Context-Sensor Performance"
            }
        ]
    },
    {
        "id": 5,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ group(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ partition(?individualE, ?individualD) ^ TestCase(?individualE) ^ method(?individualF, ?individualE) ^ TestCase(?individualF) ^ ownedOperation(?individualG, ?individualF) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 8,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [uml:Operation|TestCase] verify mass -> [Block|uml:Class] Verification Context-Mass Properties"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [uml:Operation|TestCase] verify mass -> [Block|uml:Class] Verification Context-Mass Properties"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [uml:Operation|TestCase] verify mass -> [Block|uml:Class] Verification Context-Mass Properties"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [Block|uml:Class] Verification Context-Sensor Performance"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [Block|uml:Class] Verification Context-Sensor Performance"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [Block|uml:Class] Verification Context-Sensor Performance"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [Block|uml:Class] Verification Context-Sensor Performance"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [Block|uml:Class] Verification Context-Sensor Performance"
            }
        ]
    },
    {
        "id": 6,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ partition(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ group(?individualE, ?individualD) ^ TestCase(?individualE) ^ group(?individualE, ?individualF) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 22,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|system_of_interest] Spacecraft-Physical"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Scale"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Scale"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|system_of_interest] Spacecraft-Physical"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Signal Processor"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Optical Bench"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Display"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Optical Bench"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Display"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Signal Processor"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Optical Bench"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Display"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Signal Processor"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Display"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Signal Processor"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Optical Bench"
            }
        ]
    },
    {
        "id": 7,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ partition(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ group(?individualE, ?individualD) ^ TestCase(?individualE) ^ partition(?individualE, ?individualF) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 22,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|system_of_interest] Spacecraft-Physical"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Scale"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Scale"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|system_of_interest] Spacecraft-Physical"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Signal Processor"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Optical Bench"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Display"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Optical Bench"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Display"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Signal Processor"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Optical Bench"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Display"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Signal Processor"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Display"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Signal Processor"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Optical Bench"
            }
        ]
    },
    {
        "id": 8,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ partition(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ group(?individualE, ?individualD) ^ TestCase(?individualE) ^ specification(?individualE, ?individualF) ^ TestCase(?individualF) ^ ownedOperation(?individualG, ?individualF) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 8,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [uml:Operation|TestCase] verify mass -> [Block|uml:Class] Verification Context-Mass Properties"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [uml:Operation|TestCase] verify mass -> [Block|uml:Class] Verification Context-Mass Properties"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [uml:Operation|TestCase] verify mass -> [Block|uml:Class] Verification Context-Mass Properties"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [Block|uml:Class] Verification Context-Sensor Performance"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [Block|uml:Class] Verification Context-Sensor Performance"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [Block|uml:Class] Verification Context-Sensor Performance"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [Block|uml:Class] Verification Context-Sensor Performance"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [Block|uml:Class] Verification Context-Sensor Performance"
            }
        ]
    },
    {
        "id": 9,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ partition(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ group(?individualE, ?individualD) ^ TestCase(?individualE) ^ method(?individualF, ?individualE) ^ TestCase(?individualF) ^ ownedOperation(?individualG, ?individualF) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 8,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [uml:Operation|TestCase] verify mass -> [Block|uml:Class] Verification Context-Mass Properties"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [uml:Operation|TestCase] verify mass -> [Block|uml:Class] Verification Context-Mass Properties"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [uml:Operation|TestCase] verify mass -> [Block|uml:Class] Verification Context-Mass Properties"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [Block|uml:Class] Verification Context-Sensor Performance"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [Block|uml:Class] Verification Context-Sensor Performance"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [Block|uml:Class] Verification Context-Sensor Performance"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [Block|uml:Class] Verification Context-Sensor Performance"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [Block|uml:Class] Verification Context-Sensor Performance"
            }
        ]
    },
    {
        "id": 10,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ partition(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ represents(?individualD, ?individualE) ^ Block(?individualE) -> relation(?individualA, ?individualE)",
        "count": 7,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|system_of_interest] Spacecraft-Physical"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Scale"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Display"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Signal Processor"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Optical Bench"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 11,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ specification(?individualC, ?individualD) ^ TestCase(?individualD) ^ method(?individualD, ?individualE) ^ TestCase(?individualE) ^ group(?individualE, ?individualF) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 7,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [uml:Operation|TestCase] verify mass -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [uml:Operation|TestCase] verify mass -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|system_of_interest] Spacecraft-Physical"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [uml:Operation|TestCase] verify mass -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Scale"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Display"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Signal Processor"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Optical Bench"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 12,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ specification(?individualC, ?individualD) ^ TestCase(?individualD) ^ method(?individualD, ?individualE) ^ TestCase(?individualE) ^ partition(?individualE, ?individualF) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 7,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [uml:Operation|TestCase] verify mass -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [uml:Operation|TestCase] verify mass -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|system_of_interest] Spacecraft-Physical"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [uml:Operation|TestCase] verify mass -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Scale"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Display"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Signal Processor"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Optical Bench"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 13,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ specification(?individualC, ?individualD) ^ TestCase(?individualD) ^ ownedOperation(?individualE, ?individualD) ^ Block(?individualE) -> relation(?individualA, ?individualE)",
        "count": 3,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [uml:Operation|TestCase] verify mass -> [Block|uml:Class] Verification Context-Mass Properties"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Sensitivity -> [uml:Operation|TestCase] verify sensor sensitivity -> [Block|uml:Class] Verification Context-Sensor Performance"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [Block|uml:Class] Verification Context-Sensor Performance"
            }
        ]
    },
    {
        "id": 14,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ method(?individualD, ?individualC) ^ TestCase(?individualD) ^ specification(?individualE, ?individualD) ^ TestCase(?individualE) ^ group(?individualE, ?individualF) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 7,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [uml:Operation|TestCase] verify mass -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [uml:Operation|TestCase] verify mass -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|system_of_interest] Spacecraft-Physical"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [uml:Operation|TestCase] verify mass -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Scale"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Display"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Signal Processor"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Optical Bench"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 15,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ method(?individualD, ?individualC) ^ TestCase(?individualD) ^ specification(?individualE, ?individualD) ^ TestCase(?individualE) ^ partition(?individualE, ?individualF) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 7,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [uml:Operation|TestCase] verify mass -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [uml:Operation|TestCase] verify mass -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|system_of_interest] Spacecraft-Physical"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [uml:Operation|TestCase] verify mass -> [uml:Activity|TestCase] Verify Mass -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Scale"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Display"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Signal Processor"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Optical Bench"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 16,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ method(?individualD, ?individualC) ^ TestCase(?individualD) ^ ownedOperation(?individualE, ?individualD) ^ Block(?individualE) -> relation(?individualA, ?individualE)",
        "count": 3,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Mass -> [uml:Operation|TestCase] verify mass -> [Block|uml:Class] Verification Context-Mass Properties"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Sensitivity -> [uml:Operation|TestCase] verify sensor sensitivity -> [Block|uml:Class] Verification Context-Sensor Performance"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:Operation|TestCase] verify sensor resolution -> [Block|uml:Class] Verification Context-Sensor Performance"
            }
        ]
    },
    {
        "id": 17,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Satisfy(?individualB) ^ client(?individualB, ?individualC) ^ ValueProperty(?individualC) ^ role(?individualD, ?individualC) ^ NestedConnectorEnd(?individualD) ^ end(?individualE, ?individualD) ^ BindingConnector(?individualE) ^ ownedConnector(?individualF, ?individualE) ^ Block(?individualF) -> relation(?individualA, ?individualF)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property|tpm] mass -> [uml:ConnectorEnd|NestedConnectorEnd] Unnamed -> [BindingConnector|uml:Connector] Unnamed -> [Block|uml:Class|analysis] Analysis Context"
            }
        ]
    },
    {
        "id": 18,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Satisfy(?individualB) ^ client(?individualB, ?individualC) ^ ValueProperty(?individualC) ^ redefinedProperty(?individualC, ?individualD) ^ ValueProperty(?individualD) ^ supplier(?individualE, ?individualD) ^ Allocate(?individualE) ^ client(?individualE, ?individualF) ^ ValueProperty(?individualF) ^ ownedAttribute(?individualG, ?individualF) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property|tpm] mass -> [ValueProperty|mop|uml:Property] mass -> [Allocate|uml:Abstraction] Unnamed -> [ValueProperty|moe|uml:Property] Sat Mass卫星重量 -> [Block|uml:Class] Mission Enterprise"
            }
        ]
    },
    {
        "id": 19,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Satisfy(?individualB) ^ client(?individualB, ?individualC) ^ ValueProperty(?individualC) ^ redefinedProperty(?individualC, ?individualD) ^ ValueProperty(?individualD) ^ client(?individualE, ?individualD) ^ Allocate(?individualE) ^ supplier(?individualE, ?individualF) ^ ValueProperty(?individualF) ^ ownedAttribute(?individualG, ?individualF) ^ subsystem(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property|tpm] mass -> [ValueProperty|mop|uml:Property] mass -> [Allocate|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property|tpm] Payload_mass -> [subsystem|Block|uml:Class] Payload Subsystem"
            }
        ]
    },
    {
        "id": 20,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Satisfy(?individualB) ^ client(?individualB, ?individualC) ^ ValueProperty(?individualC) ^ redefinedProperty(?individualC, ?individualD) ^ ValueProperty(?individualD) ^ ownedAttribute(?individualE, ?individualD) ^ Block(?individualE) -> relation(?individualA, ?individualE)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property|tpm] mass -> [ValueProperty|mop|uml:Property] mass -> [Block|uml:Class|system_of_interest] Spacecraft"
            }
        ]
    },
    {
        "id": 21,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Satisfy(?individualB) ^ client(?individualB, ?individualC) ^ ValueProperty(?individualC) ^ ownedAttribute(?individualD, ?individualC) ^ Block(?individualD) -> relation(?individualA, ?individualD)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property|tpm] mass -> [Block|uml:Class|system_of_interest] Spacecraft-Physical"
            }
        ]
    },
    {
        "id": 22,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ ValueProperty(?individualC) ^ supplier(?individualD, ?individualC) ^ Allocate(?individualD) ^ client(?individualD, ?individualE) ^ ValueProperty(?individualE) ^ ownedAttribute(?individualF, ?individualE) ^ Block(?individualF) -> relation(?individualA, ?individualF)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|mop|uml:Property] mass -> [Allocate|uml:Abstraction] Unnamed -> [ValueProperty|moe|uml:Property] Sat Mass卫星重量 -> [Block|uml:Class] Mission Enterprise"
            }
        ]
    },
    {
        "id": 23,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ ValueProperty(?individualC) ^ redefinedProperty(?individualD, ?individualC) ^ ValueProperty(?individualD) ^ role(?individualE, ?individualD) ^ NestedConnectorEnd(?individualE) ^ end(?individualF, ?individualE) ^ BindingConnector(?individualF) ^ ownedConnector(?individualG, ?individualF) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|mop|uml:Property] mass -> [ValueProperty|uml:Property|tpm] mass -> [uml:ConnectorEnd|NestedConnectorEnd] Unnamed -> [BindingConnector|uml:Connector] Unnamed -> [Block|uml:Class|analysis] Analysis Context"
            }
        ]
    },
    {
        "id": 24,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ ValueProperty(?individualC) ^ redefinedProperty(?individualD, ?individualC) ^ ValueProperty(?individualD) ^ ownedAttribute(?individualE, ?individualD) ^ Block(?individualE) -> relation(?individualA, ?individualE)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|mop|uml:Property] mass -> [ValueProperty|uml:Property|tpm] mass -> [Block|uml:Class|system_of_interest] Spacecraft-Physical"
            }
        ]
    },
    {
        "id": 25,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ ValueProperty(?individualC) ^ client(?individualD, ?individualC) ^ Allocate(?individualD) ^ supplier(?individualD, ?individualE) ^ ValueProperty(?individualE) ^ ownedAttribute(?individualF, ?individualE) ^ subsystem(?individualF) -> relation(?individualA, ?individualF)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|mop|uml:Property] mass -> [Allocate|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property|tpm] Payload_mass -> [subsystem|Block|uml:Class] Payload Subsystem"
            }
        ]
    },
    {
        "id": 26,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ ValueProperty(?individualC) ^ ownedAttribute(?individualD, ?individualC) ^ Block(?individualD) -> relation(?individualA, ?individualD)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Mass 卫星 -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|mop|uml:Property] mass -> [Block|uml:Class|system_of_interest] Spacecraft"
            }
        ]
    },
    {
        "id": 27,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Satisfy(?individualB) ^ client(?individualB, ?individualC) ^ ValueProperty(?individualC) ^ redefinedProperty(?individualC, ?individualD) ^ ValueProperty(?individualD) ^ definingFeature(?individualE, ?individualD) ^ uml:Slot(?individualE) ^ slot(?individualF, ?individualE) ^ uml:InstanceSpecification(?individualF) ^ classifier(?individualF, ?individualG) ^ hardware(?individualG) -> relation(?individualA, ?individualG)",
        "count": 16,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Reliability -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] lifetime -> [ValueProperty|uml:Property] lifetime -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] analysis Context.icq analysis.camera Parameters Analysis.payload Subsystem.partProperty7 -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Reliability -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] lifetime -> [ValueProperty|uml:Property] lifetime -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] camera Parameters Analysis.payload Subsystem.partProperty -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] mass -> [ValueProperty|uml:Property] mass -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] analysis Context.icq analysis.camera Parameters Analysis.payload Subsystem.partProperty7 -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] mass -> [ValueProperty|uml:Property] mass -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] camera Parameters Analysis.payload Subsystem.partProperty -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Size -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] size -> [ValueProperty|uml:Property] size -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] analysis Context.icq analysis.camera Parameters Analysis.payload Subsystem.partProperty7 -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Size -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] size -> [ValueProperty|uml:Property] size -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] camera Parameters Analysis.payload Subsystem.partProperty -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Power -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] power -> [ValueProperty|uml:Property] power -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] analysis Context.icq analysis.camera Parameters Analysis.payload Subsystem.partProperty7 -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Power -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] power -> [ValueProperty|uml:Property] power -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] camera Parameters Analysis.payload Subsystem.partProperty -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] sensitivity -> [ValueProperty|uml:Property] sensitivity -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] analysis Context.icq analysis.camera Parameters Analysis.payload Subsystem.partProperty7 -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] sensitivity -> [ValueProperty|uml:Property] sensitivity -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] camera Parameters Analysis.payload Subsystem.partProperty -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] resolution -> [ValueProperty|uml:Property] resolution -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] analysis Context.icq analysis.camera Parameters Analysis.payload Subsystem.partProperty7 -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] resolution -> [ValueProperty|uml:Property] resolution -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] camera Parameters Analysis.payload Subsystem.partProperty -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [ValueProperty|uml:Property] field of view -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] analysis Context.icq analysis.camera Parameters Analysis.payload Subsystem.partProperty7 -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [ValueProperty|uml:Property] field of view -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] camera Parameters Analysis.payload Subsystem.partProperty -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Data Rate -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] data rate -> [ValueProperty|uml:Property] data rate -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] analysis Context.icq analysis.camera Parameters Analysis.payload Subsystem.partProperty7 -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Data Rate -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] data rate -> [ValueProperty|uml:Property] data rate -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] camera Parameters Analysis.payload Subsystem.partProperty -> [hardware|Block|uml:Class] Camera"
            }
        ]
    },
    {
        "id": 28,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Satisfy(?individualB) ^ client(?individualB, ?individualC) ^ ValueProperty(?individualC) ^ redefinedProperty(?individualC, ?individualD) ^ ValueProperty(?individualD) ^ ownedAttribute(?individualE, ?individualD) ^ hardware(?individualE) -> relation(?individualA, ?individualE)",
        "count": 8,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Reliability -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] lifetime -> [ValueProperty|uml:Property] lifetime -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] mass -> [ValueProperty|uml:Property] mass -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Size -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] size -> [ValueProperty|uml:Property] size -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Power -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] power -> [ValueProperty|uml:Property] power -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] sensitivity -> [ValueProperty|uml:Property] sensitivity -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] resolution -> [ValueProperty|uml:Property] resolution -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [ValueProperty|uml:Property] field of view -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Data Rate -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] data rate -> [ValueProperty|uml:Property] data rate -> [hardware|Block|uml:Class] Camera"
            }
        ]
    },
    {
        "id": 29,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Satisfy(?individualB) ^ client(?individualB, ?individualC) ^ ValueProperty(?individualC) ^ ownedAttribute(?individualD, ?individualC) ^ hardware(?individualD) -> relation(?individualA, ?individualD)",
        "count": 8,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Reliability -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] lifetime -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] mass -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] Size -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] size -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] Power -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] power -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] sensitivity -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] resolution -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] Data Rate -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] data rate -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            }
        ]
    },
    {
        "id": 30,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ ValueProperty(?individualC) ^ definingFeature(?individualD, ?individualC) ^ uml:Slot(?individualD) ^ slot(?individualE, ?individualD) ^ uml:InstanceSpecification(?individualE) ^ classifier(?individualE, ?individualF) ^ hardware(?individualF) -> relation(?individualA, ?individualF)",
        "count": 16,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Reliability -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] lifetime -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] analysis Context.icq analysis.camera Parameters Analysis.payload Subsystem.partProperty7 -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Reliability -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] lifetime -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] camera Parameters Analysis.payload Subsystem.partProperty -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] mass -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] analysis Context.icq analysis.camera Parameters Analysis.payload Subsystem.partProperty7 -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] mass -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] camera Parameters Analysis.payload Subsystem.partProperty -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Size -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] size -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] analysis Context.icq analysis.camera Parameters Analysis.payload Subsystem.partProperty7 -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Size -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] size -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] camera Parameters Analysis.payload Subsystem.partProperty -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Power -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] power -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] analysis Context.icq analysis.camera Parameters Analysis.payload Subsystem.partProperty7 -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Power -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] power -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] camera Parameters Analysis.payload Subsystem.partProperty -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] resolution -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] analysis Context.icq analysis.camera Parameters Analysis.payload Subsystem.partProperty7 -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] resolution -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] camera Parameters Analysis.payload Subsystem.partProperty -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] sensitivity -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] analysis Context.icq analysis.camera Parameters Analysis.payload Subsystem.partProperty7 -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] sensitivity -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] camera Parameters Analysis.payload Subsystem.partProperty -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] analysis Context.icq analysis.camera Parameters Analysis.payload Subsystem.partProperty7 -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] camera Parameters Analysis.payload Subsystem.partProperty -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Data Rate -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] data rate -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] analysis Context.icq analysis.camera Parameters Analysis.payload Subsystem.partProperty7 -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Data Rate -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] data rate -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] camera Parameters Analysis.payload Subsystem.partProperty -> [hardware|Block|uml:Class] Camera"
            }
        ]
    },
    {
        "id": 31,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ ValueProperty(?individualC) ^ redefinedProperty(?individualD, ?individualC) ^ ValueProperty(?individualD) ^ ownedAttribute(?individualE, ?individualD) ^ hardware(?individualE) -> relation(?individualA, ?individualE)",
        "count": 8,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Reliability -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] lifetime -> [ValueProperty|uml:Property] lifetime -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] mass -> [ValueProperty|uml:Property] mass -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] Size -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] size -> [ValueProperty|uml:Property] size -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] Power -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] power -> [ValueProperty|uml:Property] power -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] resolution -> [ValueProperty|uml:Property] resolution -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] sensitivity -> [ValueProperty|uml:Property] sensitivity -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [ValueProperty|uml:Property] field of view -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] Data Rate -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] data rate -> [ValueProperty|uml:Property] data rate -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            }
        ]
    },
    {
        "id": 32,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ ValueProperty(?individualC) ^ ownedAttribute(?individualD, ?individualC) ^ hardware(?individualD) -> relation(?individualA, ?individualD)",
        "count": 8,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Reliability -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] lifetime -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Mass -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] mass -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Size -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] size -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Power -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] power -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] resolution -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] sensitivity -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Data Rate -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] data rate -> [hardware|Block|uml:Class] Camera"
            }
        ]
    },
    {
        "id": 33,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Satisfy(?individualB) ^ client(?individualB, ?individualC) ^ ValueProperty(?individualC) ^ redefinedProperty(?individualC, ?individualD) ^ ValueProperty(?individualD) ^ type(?individualD, ?individualE) ^ ValueType(?individualE) ^ type(?individualF, ?individualE) ^ ValueProperty(?individualF) ^ ownedAttribute(?individualG, ?individualF) ^ hardware(?individualG) -> relation(?individualA, ?individualG)",
        "count": 8,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Size -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] size -> [ValueProperty|uml:Property] size -> [ValueType|uml:DataType] Shape -> [ValueProperty|uml:Property] size -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] resolution -> [ValueProperty|uml:Property] resolution -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] field of view -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] resolution -> [ValueProperty|uml:Property] resolution -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] resolution -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] resolution -> [ValueProperty|uml:Property] resolution -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] field of view -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [ValueProperty|uml:Property] field of view -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] field of view -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [ValueProperty|uml:Property] field of view -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] resolution -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [ValueProperty|uml:Property] field of view -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] resolution -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Data Rate -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] data rate -> [ValueProperty|uml:Property] data rate -> [ValueType|uml:DataType] 4 -> [ValueProperty|uml:Property] data rate -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            }
        ]
    },
    {
        "id": 34,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Satisfy(?individualB) ^ client(?individualB, ?individualC) ^ ValueProperty(?individualC) ^ type(?individualC, ?individualD) ^ ValueType(?individualD) ^ type(?individualE, ?individualD) ^ ValueProperty(?individualE) ^ redefinedProperty(?individualF, ?individualE) ^ ValueProperty(?individualF) ^ ownedAttribute(?individualG, ?individualF) ^ hardware(?individualG) -> relation(?individualA, ?individualG)",
        "count": 6,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Size -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] size -> [ValueType|uml:DataType] Shape -> [ValueProperty|uml:Property] size -> [ValueProperty|uml:Property] size -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] resolution -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] resolution -> [ValueProperty|uml:Property] resolution -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] resolution -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] field of view -> [ValueProperty|uml:Property] field of view -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] resolution -> [ValueProperty|uml:Property] resolution -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] field of view -> [ValueProperty|uml:Property] field of view -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] Data Rate -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] data rate -> [ValueType|uml:DataType] 4 -> [ValueProperty|uml:Property] data rate -> [ValueProperty|uml:Property] data rate -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            }
        ]
    },
    {
        "id": 35,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Satisfy(?individualB) ^ client(?individualB, ?individualC) ^ ValueProperty(?individualC) ^ type(?individualC, ?individualD) ^ ValueType(?individualD) ^ type(?individualE, ?individualD) ^ ValueProperty(?individualE) ^ ownedAttribute(?individualF, ?individualE) ^ hardware(?individualF) -> relation(?individualA, ?individualF)",
        "count": 8,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Size -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] size -> [ValueType|uml:DataType] Shape -> [ValueProperty|uml:Property] size -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] resolution -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] field of view -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] resolution -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] resolution -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] resolution -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] field of view -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] resolution -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] resolution -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] field of view -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Data Rate -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] data rate -> [ValueType|uml:DataType] 4 -> [ValueProperty|uml:Property] data rate -> [hardware|Block|uml:Class] Camera"
            }
        ]
    },
    {
        "id": 36,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ ValueProperty(?individualC) ^ redefinedProperty(?individualD, ?individualC) ^ ValueProperty(?individualD) ^ type(?individualD, ?individualE) ^ ValueType(?individualE) ^ type(?individualF, ?individualE) ^ ValueProperty(?individualF) ^ ownedAttribute(?individualG, ?individualF) ^ hardware(?individualG) -> relation(?individualA, ?individualG)",
        "count": 8,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Size -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] size -> [ValueProperty|uml:Property] size -> [ValueType|uml:DataType] Shape -> [ValueProperty|uml:Property] size -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] resolution -> [ValueProperty|uml:Property] resolution -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] field of view -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] resolution -> [ValueProperty|uml:Property] resolution -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] resolution -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] resolution -> [ValueProperty|uml:Property] resolution -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] field of view -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [ValueProperty|uml:Property] field of view -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] resolution -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [ValueProperty|uml:Property] field of view -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] resolution -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [ValueProperty|uml:Property] field of view -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] field of view -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Data Rate -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] data rate -> [ValueProperty|uml:Property] data rate -> [ValueType|uml:DataType] 4 -> [ValueProperty|uml:Property] data rate -> [hardware|Block|uml:Class] Camera"
            }
        ]
    },
    {
        "id": 37,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ ValueProperty(?individualC) ^ type(?individualC, ?individualD) ^ ValueType(?individualD) ^ type(?individualE, ?individualD) ^ ValueProperty(?individualE) ^ redefinedProperty(?individualE, ?individualF) ^ ValueProperty(?individualF) ^ ownedAttribute(?individualG, ?individualF) ^ hardware(?individualG) -> relation(?individualA, ?individualG)",
        "count": 7,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Size -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] size -> [ValueType|uml:DataType] Shape -> [ValueProperty|uml:Property] size -> [ValueProperty|uml:Property] size -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] resolution -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] field of view -> [ValueProperty|uml:Property] field of view -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] resolution -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] resolution -> [ValueProperty|uml:Property] resolution -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] resolution -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] field of view -> [ValueProperty|uml:Property] field of view -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] field of view -> [ValueProperty|uml:Property] field of view -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] resolution -> [ValueProperty|uml:Property] resolution -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Data Rate -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] data rate -> [ValueType|uml:DataType] 4 -> [ValueProperty|uml:Property] data rate -> [ValueProperty|uml:Property] data rate -> [hardware|Block|uml:Class] Camera"
            }
        ]
    },
    {
        "id": 38,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ ValueProperty(?individualC) ^ type(?individualC, ?individualD) ^ ValueType(?individualD) ^ type(?individualE, ?individualD) ^ ValueProperty(?individualE) ^ ownedAttribute(?individualF, ?individualE) ^ hardware(?individualF) -> relation(?individualA, ?individualF)",
        "count": 8,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Size -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] size -> [ValueType|uml:DataType] Shape -> [ValueProperty|uml:Property] size -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] resolution -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] field of view -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] resolution -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] resolution -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] resolution -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] field of view -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] field of view -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] resolution -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] resolution -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Data Rate -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] data rate -> [ValueType|uml:DataType] 4 -> [ValueProperty|uml:Property] data rate -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            }
        ]
    },
    {
        "id": 39,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ node(?individualC, ?individualD) ^ uml:InitialNode(?individualD) ^ inPartition(?individualD, ?individualE) ^ AllocateActivityPartition(?individualE) ^ represents(?individualE, ?individualF) ^ Block(?individualF) -> relation(?individualA, ?individualF)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:InitialNode] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 40,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ node(?individualC, ?individualD) ^ uml:InitialNode(?individualD) ^ node(?individualE, ?individualD) ^ AllocateActivityPartition(?individualE) ^ represents(?individualE, ?individualF) ^ Block(?individualF) -> relation(?individualA, ?individualF)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:InitialNode] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 41,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ node(?individualC, ?individualD) ^ uml:InitialNode(?individualD) ^ source(?individualE, ?individualD) ^ uml:ControlFlow(?individualE) ^ edge(?individualF, ?individualE) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:InitialNode] Unnamed -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 42,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ node(?individualC, ?individualD) ^ uml:InitialNode(?individualD) ^ source(?individualE, ?individualD) ^ uml:ControlFlow(?individualE) ^ inPartition(?individualE, ?individualF) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:InitialNode] Unnamed -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 43,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ node(?individualC, ?individualD) ^ uml:ActivityFinalNode(?individualD) ^ inPartition(?individualD, ?individualE) ^ AllocateActivityPartition(?individualE) ^ represents(?individualE, ?individualF) ^ Block(?individualF) -> relation(?individualA, ?individualF)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ActivityFinalNode] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 44,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ node(?individualC, ?individualD) ^ uml:ActivityFinalNode(?individualD) ^ node(?individualE, ?individualD) ^ AllocateActivityPartition(?individualE) ^ represents(?individualE, ?individualF) ^ Block(?individualF) -> relation(?individualA, ?individualF)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ActivityFinalNode] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 45,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ node(?individualC, ?individualD) ^ uml:ActivityFinalNode(?individualD) ^ target(?individualE, ?individualD) ^ uml:ControlFlow(?individualE) ^ edge(?individualF, ?individualE) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ActivityFinalNode] Unnamed -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 46,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ node(?individualC, ?individualD) ^ uml:ActivityFinalNode(?individualD) ^ target(?individualE, ?individualD) ^ uml:ControlFlow(?individualE) ^ inPartition(?individualE, ?individualF) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ActivityFinalNode] Unnamed -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 47,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ node(?individualC, ?individualD) ^ uml:CallBehaviorAction(?individualD) ^ inPartition(?individualD, ?individualE) ^ AllocateActivityPartition(?individualE) ^ represents(?individualE, ?individualF) ^ Block(?individualF) -> relation(?individualA, ?individualF)",
        "count": 7,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Signal Processor"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Display"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Optical Bench"
            }
        ]
    },
    {
        "id": 48,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ node(?individualC, ?individualD) ^ uml:CallBehaviorAction(?individualD) ^ behavior(?individualD, ?individualE) ^ uml:Activity(?individualE) ^ client(?individualF, ?individualE) ^ Allocate(?individualF) ^ supplier(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 8,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:Activity] Assess Pass/Fail -> [Allocate|uml:Abstraction] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:Activity] Measure Resolution -> [Allocate|uml:Abstraction] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:Activity] Control Unit-Under-Test -> [Allocate|uml:Abstraction] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:Activity] Process Signal -> [Allocate|uml:Abstraction] Unnamed -> [Block|uml:Class|test_component] Signal Processor"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:Activity] Display Imagery -> [Allocate|uml:Abstraction] Unnamed -> [Block|uml:Class|test_component] Display"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:Activity] Control Thermal Source -> [Allocate|uml:Abstraction] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:Activity] Generate Thermal Emission -> [Allocate|uml:Abstraction] Unnamed -> [Block|uml:Class|test_component] Optical Bench"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:Activity] Sense Thermal Emissions -> [Allocate|uml:Abstraction] Unnamed -> [Block|uml:Class|system_of_interest] Spacecraft-Physical"
            }
        ]
    },
    {
        "id": 49,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ node(?individualC, ?individualD) ^ uml:CallBehaviorAction(?individualD) ^ node(?individualE, ?individualD) ^ AllocateActivityPartition(?individualE) ^ represents(?individualE, ?individualF) ^ Block(?individualF) -> relation(?individualA, ?individualF)",
        "count": 7,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Signal Processor"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Display"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Optical Bench"
            }
        ]
    },
    {
        "id": 50,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ node(?individualC, ?individualD) ^ uml:CallBehaviorAction(?individualD) ^ source(?individualE, ?individualD) ^ uml:ControlFlow(?individualE) ^ edge(?individualF, ?individualE) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 3,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 51,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ node(?individualC, ?individualD) ^ uml:CallBehaviorAction(?individualD) ^ source(?individualE, ?individualD) ^ uml:ControlFlow(?individualE) ^ inPartition(?individualE, ?individualF) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 3,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 52,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ node(?individualC, ?individualD) ^ uml:CallBehaviorAction(?individualD) ^ target(?individualE, ?individualD) ^ uml:ControlFlow(?individualE) ^ edge(?individualF, ?individualE) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 3,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 53,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ node(?individualC, ?individualD) ^ uml:CallBehaviorAction(?individualD) ^ target(?individualE, ?individualD) ^ uml:ControlFlow(?individualE) ^ inPartition(?individualE, ?individualF) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 3,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 54,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ node(?individualC, ?individualD) ^ uml:CallBehaviorAction(?individualD) ^ argument(?individualD, ?individualE) ^ uml:InputPin(?individualE) ^ type(?individualE, ?individualF) ^ Block(?individualF) -> relation(?individualA, ?individualF)",
        "count": 4,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:InputPin] Unnamed -> [Block|uml:Class] Thermal Imagery"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:InputPin] Unnamed -> [Block|uml:Class] Payload Sensor Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:InputPin] Unnamed -> [Block|uml:Class] Observation Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:InputPin] Unnamed -> [Block|uml:Class] Sensor CMD"
            }
        ]
    },
    {
        "id": 55,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ node(?individualC, ?individualD) ^ uml:CallBehaviorAction(?individualD) ^ behavior(?individualD, ?individualE) ^ uml:Activity(?individualE) ^ node(?individualE, ?individualF) ^ uml:ActivityParameterNode(?individualF) ^ type(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 8,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:Activity] Measure Resolution -> [uml:ActivityParameterNode] argument -> [Block|uml:Class] Thermal Imagery"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:Activity] Control Unit-Under-Test -> [uml:ActivityParameterNode] result -> [Block|uml:Class] Sensor CMD"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:Activity] Process Signal -> [uml:ActivityParameterNode] result -> [Block|uml:Class] Observation Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:Activity] Process Signal -> [uml:ActivityParameterNode] argument -> [Block|uml:Class] Payload Sensor Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:Activity] Display Imagery -> [uml:ActivityParameterNode] result -> [Block|uml:Class] Thermal Imagery"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:Activity] Display Imagery -> [uml:ActivityParameterNode] argument -> [Block|uml:Class] Observation Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:Activity] Sense Thermal Emissions -> [uml:ActivityParameterNode] Unnamed -> [Block|uml:Class] Payload Sensor Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:Activity] Sense Thermal Emissions -> [uml:ActivityParameterNode] Unnamed -> [Block|uml:Class] Sensor CMD"
            }
        ]
    },
    {
        "id": 56,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ node(?individualC, ?individualD) ^ uml:CallBehaviorAction(?individualD) ^ behavior(?individualD, ?individualE) ^ uml:Activity(?individualE) ^ ownedParameter(?individualE, ?individualF) ^ uml:Parameter(?individualF) ^ type(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 8,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:Activity] Measure Resolution -> [uml:Parameter] argument -> [Block|uml:Class] Thermal Imagery"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:Activity] Control Unit-Under-Test -> [uml:Parameter] result -> [Block|uml:Class] Sensor CMD"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:Activity] Process Signal -> [uml:Parameter] result -> [Block|uml:Class] Observation Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:Activity] Process Signal -> [uml:Parameter] argument -> [Block|uml:Class] Payload Sensor Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:Activity] Display Imagery -> [uml:Parameter] result -> [Block|uml:Class] Thermal Imagery"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:Activity] Display Imagery -> [uml:Parameter] argument -> [Block|uml:Class] Observation Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:Activity] Sense Thermal Emissions -> [uml:Parameter] Unnamed -> [Block|uml:Class] Payload Sensor Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:Activity] Sense Thermal Emissions -> [uml:Parameter] Unnamed -> [Block|uml:Class] Sensor CMD"
            }
        ]
    },
    {
        "id": 57,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ node(?individualC, ?individualD) ^ uml:CallBehaviorAction(?individualD) ^ result(?individualD, ?individualE) ^ uml:OutputPin(?individualE) ^ type(?individualE, ?individualF) ^ Block(?individualF) -> relation(?individualA, ?individualF)",
        "count": 4,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:OutputPin] Unnamed -> [Block|uml:Class] Sensor CMD"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:OutputPin] Unnamed -> [Block|uml:Class] Observation Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:OutputPin] Unnamed -> [Block|uml:Class] Thermal Imagery"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:OutputPin] Unnamed -> [Block|uml:Class] Payload Sensor Data"
            }
        ]
    },
    {
        "id": 58,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ node(?individualC, ?individualD) ^ uml:CallBehaviorAction(?individualD) ^ behavior(?individualD, ?individualE) ^ uml:Activity(?individualE) ^ client(?individualF, ?individualE) ^ Allocate(?individualF) ^ supplier(?individualF, ?individualG) ^ subsystem(?individualG) -> relation(?individualA, ?individualG)",
        "count": 2,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:Activity] Process Signal -> [Allocate|uml:Abstraction] Unnamed -> [subsystem|Block|uml:Class] Payload Subsystem"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:Activity] Sense Thermal Emissions -> [Allocate|uml:Abstraction] Unnamed -> [subsystem|Block|uml:Class] Payload Subsystem"
            }
        ]
    },
    {
        "id": 59,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ node(?individualC, ?individualD) ^ uml:CallBehaviorAction(?individualD) ^ behavior(?individualD, ?individualE) ^ uml:Activity(?individualE) ^ client(?individualF, ?individualE) ^ Allocate(?individualF) ^ supplier(?individualF, ?individualG) ^ hardware(?individualG) -> relation(?individualA, ?individualG)",
        "count": 3,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:Activity] Process Signal -> [Allocate|uml:Abstraction] Unnamed -> [hardware|Block|uml:Class] Signal Processor"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:Activity] Sense Thermal Emissions -> [Allocate|uml:Abstraction] Unnamed -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [uml:Activity] Sense Thermal Emissions -> [Allocate|uml:Abstraction] Unnamed -> [hardware|Block|uml:Class] Camera"
            }
        ]
    },
    {
        "id": 60,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ node(?individualC, ?individualD) ^ uml:CallBehaviorAction(?individualD) ^ inPartition(?individualD, ?individualE) ^ AllocateActivityPartition(?individualE) ^ represents(?individualE, ?individualF) ^ ReferenceProperty(?individualF) ^ ownedAttribute(?individualG, ?individualF) ^ subsystem(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [ReferenceProperty|uml:Property] unit-under-test -> [subsystem|Block|uml:Class] Payload Subsystem"
            }
        ]
    },
    {
        "id": 61,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ node(?individualC, ?individualD) ^ uml:CallBehaviorAction(?individualD) ^ inPartition(?individualD, ?individualE) ^ AllocateActivityPartition(?individualE) ^ represents(?individualE, ?individualF) ^ ReferenceProperty(?individualF) ^ type(?individualF, ?individualG) ^ hardware(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [ReferenceProperty|uml:Property] unit-under-test -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            }
        ]
    },
    {
        "id": 62,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ node(?individualC, ?individualD) ^ uml:CallBehaviorAction(?individualD) ^ inPartition(?individualD, ?individualE) ^ AllocateActivityPartition(?individualE) ^ represents(?individualE, ?individualF) ^ ReferenceProperty(?individualF) ^ ownedAttribute(?individualG, ?individualF) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [ReferenceProperty|uml:Property] system-under-test -> [Block|uml:Class] Verification Context-Sensor Performance"
            }
        ]
    },
    {
        "id": 63,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ node(?individualC, ?individualD) ^ uml:CallBehaviorAction(?individualD) ^ inPartition(?individualD, ?individualE) ^ AllocateActivityPartition(?individualE) ^ represents(?individualE, ?individualF) ^ ReferenceProperty(?individualF) ^ type(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [ReferenceProperty|uml:Property] system-under-test -> [Block|uml:Class|system_of_interest] Spacecraft-Physical"
            }
        ]
    },
    {
        "id": 64,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ node(?individualC, ?individualD) ^ uml:CallBehaviorAction(?individualD) ^ node(?individualE, ?individualD) ^ AllocateActivityPartition(?individualE) ^ represents(?individualE, ?individualF) ^ ReferenceProperty(?individualF) ^ ownedAttribute(?individualG, ?individualF) ^ subsystem(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [ReferenceProperty|uml:Property] unit-under-test -> [subsystem|Block|uml:Class] Payload Subsystem"
            }
        ]
    },
    {
        "id": 65,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ node(?individualC, ?individualD) ^ uml:CallBehaviorAction(?individualD) ^ node(?individualE, ?individualD) ^ AllocateActivityPartition(?individualE) ^ represents(?individualE, ?individualF) ^ ReferenceProperty(?individualF) ^ type(?individualF, ?individualG) ^ hardware(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [ReferenceProperty|uml:Property] unit-under-test -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            }
        ]
    },
    {
        "id": 66,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ node(?individualC, ?individualD) ^ uml:CallBehaviorAction(?individualD) ^ node(?individualE, ?individualD) ^ AllocateActivityPartition(?individualE) ^ represents(?individualE, ?individualF) ^ ReferenceProperty(?individualF) ^ ownedAttribute(?individualG, ?individualF) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [ReferenceProperty|uml:Property] system-under-test -> [Block|uml:Class] Verification Context-Sensor Performance"
            }
        ]
    },
    {
        "id": 67,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ node(?individualC, ?individualD) ^ uml:CallBehaviorAction(?individualD) ^ node(?individualE, ?individualD) ^ AllocateActivityPartition(?individualE) ^ represents(?individualE, ?individualF) ^ ReferenceProperty(?individualF) ^ type(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [ReferenceProperty|uml:Property] system-under-test -> [Block|uml:Class|system_of_interest] Spacecraft-Physical"
            }
        ]
    },
    {
        "id": 68,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ group(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ inPartition(?individualE, ?individualD) ^ uml:CallBehaviorAction(?individualE) ^ result(?individualE, ?individualF) ^ uml:OutputPin(?individualF) ^ type(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 4,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:OutputPin] Unnamed -> [Block|uml:Class] Thermal Imagery"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:OutputPin] Unnamed -> [Block|uml:Class] Observation Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:OutputPin] Unnamed -> [Block|uml:Class] Payload Sensor Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:OutputPin] Unnamed -> [Block|uml:Class] Sensor CMD"
            }
        ]
    },
    {
        "id": 69,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ group(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ inPartition(?individualE, ?individualD) ^ uml:CallBehaviorAction(?individualE) ^ argument(?individualE, ?individualF) ^ uml:InputPin(?individualF) ^ type(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 4,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:InputPin] Unnamed -> [Block|uml:Class] Observation Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:InputPin] Unnamed -> [Block|uml:Class] Payload Sensor Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:InputPin] Unnamed -> [Block|uml:Class] Sensor CMD"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:InputPin] Unnamed -> [Block|uml:Class] Thermal Imagery"
            }
        ]
    },
    {
        "id": 70,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ group(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ inPartition(?individualE, ?individualD) ^ uml:CallBehaviorAction(?individualE) ^ node(?individualF, ?individualE) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 7,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Display"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Signal Processor"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Optical Bench"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 71,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ group(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ node(?individualD, ?individualE) ^ uml:CallBehaviorAction(?individualE) ^ result(?individualE, ?individualF) ^ uml:OutputPin(?individualF) ^ type(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 4,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:OutputPin] Unnamed -> [Block|uml:Class] Thermal Imagery"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:OutputPin] Unnamed -> [Block|uml:Class] Observation Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:OutputPin] Unnamed -> [Block|uml:Class] Payload Sensor Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:OutputPin] Unnamed -> [Block|uml:Class] Sensor CMD"
            }
        ]
    },
    {
        "id": 72,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ group(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ node(?individualD, ?individualE) ^ uml:CallBehaviorAction(?individualE) ^ argument(?individualE, ?individualF) ^ uml:InputPin(?individualF) ^ type(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 4,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:InputPin] Unnamed -> [Block|uml:Class] Observation Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:InputPin] Unnamed -> [Block|uml:Class] Payload Sensor Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:InputPin] Unnamed -> [Block|uml:Class] Sensor CMD"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:InputPin] Unnamed -> [Block|uml:Class] Thermal Imagery"
            }
        ]
    },
    {
        "id": 73,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ group(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ node(?individualD, ?individualE) ^ uml:CallBehaviorAction(?individualE) ^ inPartition(?individualE, ?individualF) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 7,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Display"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Signal Processor"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Optical Bench"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 74,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ group(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ subpartition(?individualD, ?individualE) ^ AllocateActivityPartition(?individualE) ^ represents(?individualE, ?individualF) ^ ReferenceProperty(?individualF) ^ ownedAttribute(?individualG, ?individualF) ^ subsystem(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [ReferenceProperty|uml:Property] unit-under-test -> [subsystem|Block|uml:Class] Payload Subsystem"
            }
        ]
    },
    {
        "id": 75,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ group(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ subpartition(?individualD, ?individualE) ^ AllocateActivityPartition(?individualE) ^ represents(?individualE, ?individualF) ^ ReferenceProperty(?individualF) ^ type(?individualF, ?individualG) ^ hardware(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [ReferenceProperty|uml:Property] unit-under-test -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            }
        ]
    },
    {
        "id": 76,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ group(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ represents(?individualD, ?individualE) ^ ReferenceProperty(?individualE) ^ ownedAttribute(?individualF, ?individualE) ^ Block(?individualF) -> relation(?individualA, ?individualF)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [ReferenceProperty|uml:Property] system-under-test -> [Block|uml:Class] Verification Context-Sensor Performance"
            }
        ]
    },
    {
        "id": 77,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ group(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ represents(?individualD, ?individualE) ^ ReferenceProperty(?individualE) ^ type(?individualE, ?individualF) ^ Block(?individualF) -> relation(?individualA, ?individualF)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [ReferenceProperty|uml:Property] system-under-test -> [Block|uml:Class|system_of_interest] Spacecraft-Physical"
            }
        ]
    },
    {
        "id": 78,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ group(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ inPartition(?individualE, ?individualD) ^ uml:InitialNode(?individualE) ^ node(?individualF, ?individualE) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:InitialNode] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 79,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ group(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ inPartition(?individualE, ?individualD) ^ uml:ActivityFinalNode(?individualE) ^ node(?individualF, ?individualE) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:ActivityFinalNode] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 80,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ group(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ node(?individualD, ?individualE) ^ uml:InitialNode(?individualE) ^ inPartition(?individualE, ?individualF) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:InitialNode] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 81,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ group(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ node(?individualD, ?individualE) ^ uml:ActivityFinalNode(?individualE) ^ inPartition(?individualE, ?individualF) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:ActivityFinalNode] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 82,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ group(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ edge(?individualD, ?individualE) ^ uml:ControlFlow(?individualE) ^ inPartition(?individualE, ?individualF) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 4,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 83,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ group(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ inPartition(?individualE, ?individualD) ^ uml:ControlFlow(?individualE) ^ edge(?individualF, ?individualE) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 4,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 84,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ edge(?individualC, ?individualD) ^ uml:ControlFlow(?individualD) ^ edge(?individualE, ?individualD) ^ AllocateActivityPartition(?individualE) ^ represents(?individualE, ?individualF) ^ Block(?individualF) -> relation(?individualA, ?individualF)",
        "count": 4,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 85,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ edge(?individualC, ?individualD) ^ uml:ControlFlow(?individualD) ^ inPartition(?individualD, ?individualE) ^ AllocateActivityPartition(?individualE) ^ represents(?individualE, ?individualF) ^ Block(?individualF) -> relation(?individualA, ?individualF)",
        "count": 4,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 86,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ edge(?individualC, ?individualD) ^ uml:ControlFlow(?individualD) ^ target(?individualD, ?individualE) ^ uml:CallBehaviorAction(?individualE) ^ inPartition(?individualE, ?individualF) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 3,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ControlFlow] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ControlFlow] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ControlFlow] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 87,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ edge(?individualC, ?individualD) ^ uml:ControlFlow(?individualD) ^ target(?individualD, ?individualE) ^ uml:CallBehaviorAction(?individualE) ^ node(?individualF, ?individualE) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 3,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ControlFlow] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ControlFlow] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ControlFlow] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 88,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ edge(?individualC, ?individualD) ^ uml:ControlFlow(?individualD) ^ source(?individualD, ?individualE) ^ uml:CallBehaviorAction(?individualE) ^ result(?individualE, ?individualF) ^ uml:OutputPin(?individualF) ^ type(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ControlFlow] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:OutputPin] Unnamed -> [Block|uml:Class] Sensor CMD"
            }
        ]
    },
    {
        "id": 89,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ edge(?individualC, ?individualD) ^ uml:ControlFlow(?individualD) ^ source(?individualD, ?individualE) ^ uml:CallBehaviorAction(?individualE) ^ inPartition(?individualE, ?individualF) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 3,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ControlFlow] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ControlFlow] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ControlFlow] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 90,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ edge(?individualC, ?individualD) ^ uml:ControlFlow(?individualD) ^ source(?individualD, ?individualE) ^ uml:CallBehaviorAction(?individualE) ^ node(?individualF, ?individualE) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 3,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ControlFlow] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ControlFlow] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ControlFlow] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 91,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ edge(?individualC, ?individualD) ^ uml:ControlFlow(?individualD) ^ target(?individualD, ?individualE) ^ uml:CallBehaviorAction(?individualE) ^ result(?individualE, ?individualF) ^ uml:OutputPin(?individualF) ^ type(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ControlFlow] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:OutputPin] Unnamed -> [Block|uml:Class] Sensor CMD"
            }
        ]
    },
    {
        "id": 92,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ edge(?individualC, ?individualD) ^ uml:ControlFlow(?individualD) ^ source(?individualD, ?individualE) ^ uml:InitialNode(?individualE) ^ inPartition(?individualE, ?individualF) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ControlFlow] Unnamed -> [uml:InitialNode] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 93,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ edge(?individualC, ?individualD) ^ uml:ControlFlow(?individualD) ^ source(?individualD, ?individualE) ^ uml:InitialNode(?individualE) ^ node(?individualF, ?individualE) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ControlFlow] Unnamed -> [uml:InitialNode] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 94,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ edge(?individualC, ?individualD) ^ uml:ControlFlow(?individualD) ^ target(?individualD, ?individualE) ^ uml:ActivityFinalNode(?individualE) ^ inPartition(?individualE, ?individualF) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ControlFlow] Unnamed -> [uml:ActivityFinalNode] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 95,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ edge(?individualC, ?individualD) ^ uml:ControlFlow(?individualD) ^ target(?individualD, ?individualE) ^ uml:ActivityFinalNode(?individualE) ^ node(?individualF, ?individualE) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ControlFlow] Unnamed -> [uml:ActivityFinalNode] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 96,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ edge(?individualC, ?individualD) ^ uml:ControlFlow(?individualD) ^ source(?individualD, ?individualE) ^ uml:CallBehaviorAction(?individualE) ^ argument(?individualE, ?individualF) ^ uml:InputPin(?individualF) ^ type(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ControlFlow] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:InputPin] Unnamed -> [Block|uml:Class] Thermal Imagery"
            }
        ]
    },
    {
        "id": 97,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ edge(?individualC, ?individualD) ^ uml:ObjectFlow(?individualD) ^ target(?individualD, ?individualE) ^ uml:InputPin(?individualE) ^ type(?individualE, ?individualF) ^ Block(?individualF) -> relation(?individualA, ?individualF)",
        "count": 4,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ObjectFlow] Unnamed -> [uml:InputPin] Unnamed -> [Block|uml:Class] Thermal Imagery"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ObjectFlow] Unnamed -> [uml:InputPin] Unnamed -> [Block|uml:Class] Observation Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ObjectFlow] Unnamed -> [uml:InputPin] Unnamed -> [Block|uml:Class] Payload Sensor Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ObjectFlow] Unnamed -> [uml:InputPin] Unnamed -> [Block|uml:Class] Sensor CMD"
            }
        ]
    },
    {
        "id": 98,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ edge(?individualC, ?individualD) ^ uml:ObjectFlow(?individualD) ^ source(?individualD, ?individualE) ^ uml:OutputPin(?individualE) ^ type(?individualE, ?individualF) ^ Block(?individualF) -> relation(?individualA, ?individualF)",
        "count": 4,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ObjectFlow] Unnamed -> [uml:OutputPin] Unnamed -> [Block|uml:Class] Thermal Imagery"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ObjectFlow] Unnamed -> [uml:OutputPin] Unnamed -> [Block|uml:Class] Observation Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ObjectFlow] Unnamed -> [uml:OutputPin] Unnamed -> [Block|uml:Class] Payload Sensor Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [uml:ObjectFlow] Unnamed -> [uml:OutputPin] Unnamed -> [Block|uml:Class] Sensor CMD"
            }
        ]
    },
    {
        "id": 99,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ partition(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ inPartition(?individualE, ?individualD) ^ uml:CallBehaviorAction(?individualE) ^ result(?individualE, ?individualF) ^ uml:OutputPin(?individualF) ^ type(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 4,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:OutputPin] Unnamed -> [Block|uml:Class] Thermal Imagery"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:OutputPin] Unnamed -> [Block|uml:Class] Observation Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:OutputPin] Unnamed -> [Block|uml:Class] Payload Sensor Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:OutputPin] Unnamed -> [Block|uml:Class] Sensor CMD"
            }
        ]
    },
    {
        "id": 100,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ partition(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ inPartition(?individualE, ?individualD) ^ uml:CallBehaviorAction(?individualE) ^ argument(?individualE, ?individualF) ^ uml:InputPin(?individualF) ^ type(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 4,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:InputPin] Unnamed -> [Block|uml:Class] Observation Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:InputPin] Unnamed -> [Block|uml:Class] Payload Sensor Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:InputPin] Unnamed -> [Block|uml:Class] Sensor CMD"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:InputPin] Unnamed -> [Block|uml:Class] Thermal Imagery"
            }
        ]
    },
    {
        "id": 101,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ partition(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ inPartition(?individualE, ?individualD) ^ uml:CallBehaviorAction(?individualE) ^ node(?individualF, ?individualE) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 7,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Display"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Signal Processor"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Optical Bench"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 102,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ partition(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ node(?individualD, ?individualE) ^ uml:CallBehaviorAction(?individualE) ^ result(?individualE, ?individualF) ^ uml:OutputPin(?individualF) ^ type(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 4,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:OutputPin] Unnamed -> [Block|uml:Class] Thermal Imagery"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:OutputPin] Unnamed -> [Block|uml:Class] Observation Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:OutputPin] Unnamed -> [Block|uml:Class] Payload Sensor Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:OutputPin] Unnamed -> [Block|uml:Class] Sensor CMD"
            }
        ]
    },
    {
        "id": 103,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ partition(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ node(?individualD, ?individualE) ^ uml:CallBehaviorAction(?individualE) ^ argument(?individualE, ?individualF) ^ uml:InputPin(?individualF) ^ type(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 4,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:InputPin] Unnamed -> [Block|uml:Class] Observation Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:InputPin] Unnamed -> [Block|uml:Class] Payload Sensor Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:InputPin] Unnamed -> [Block|uml:Class] Sensor CMD"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [uml:InputPin] Unnamed -> [Block|uml:Class] Thermal Imagery"
            }
        ]
    },
    {
        "id": 104,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ partition(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ node(?individualD, ?individualE) ^ uml:CallBehaviorAction(?individualE) ^ inPartition(?individualE, ?individualF) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 7,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Display"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Signal Processor"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class|test_component] Optical Bench"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 105,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ partition(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ subpartition(?individualD, ?individualE) ^ AllocateActivityPartition(?individualE) ^ represents(?individualE, ?individualF) ^ ReferenceProperty(?individualF) ^ ownedAttribute(?individualG, ?individualF) ^ subsystem(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [ReferenceProperty|uml:Property] unit-under-test -> [subsystem|Block|uml:Class] Payload Subsystem"
            }
        ]
    },
    {
        "id": 106,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ partition(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ subpartition(?individualD, ?individualE) ^ AllocateActivityPartition(?individualE) ^ represents(?individualE, ?individualF) ^ ReferenceProperty(?individualF) ^ type(?individualF, ?individualG) ^ hardware(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [ReferenceProperty|uml:Property] unit-under-test -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            }
        ]
    },
    {
        "id": 107,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ partition(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ represents(?individualD, ?individualE) ^ ReferenceProperty(?individualE) ^ ownedAttribute(?individualF, ?individualE) ^ Block(?individualF) -> relation(?individualA, ?individualF)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [ReferenceProperty|uml:Property] system-under-test -> [Block|uml:Class] Verification Context-Sensor Performance"
            }
        ]
    },
    {
        "id": 108,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ partition(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ represents(?individualD, ?individualE) ^ ReferenceProperty(?individualE) ^ type(?individualE, ?individualF) ^ Block(?individualF) -> relation(?individualA, ?individualF)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [ReferenceProperty|uml:Property] system-under-test -> [Block|uml:Class|system_of_interest] Spacecraft-Physical"
            }
        ]
    },
    {
        "id": 109,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ partition(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ inPartition(?individualE, ?individualD) ^ uml:InitialNode(?individualE) ^ node(?individualF, ?individualE) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:InitialNode] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 110,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ partition(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ inPartition(?individualE, ?individualD) ^ uml:ActivityFinalNode(?individualE) ^ node(?individualF, ?individualE) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:ActivityFinalNode] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 111,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ partition(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ node(?individualD, ?individualE) ^ uml:InitialNode(?individualE) ^ inPartition(?individualE, ?individualF) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:InitialNode] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 112,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ partition(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ node(?individualD, ?individualE) ^ uml:ActivityFinalNode(?individualE) ^ inPartition(?individualE, ?individualF) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:ActivityFinalNode] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 113,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ partition(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ edge(?individualD, ?individualE) ^ uml:ControlFlow(?individualE) ^ inPartition(?individualE, ?individualF) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 4,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 114,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Verify(?individualB) ^ client(?individualB, ?individualC) ^ TestCase(?individualC) ^ partition(?individualC, ?individualD) ^ AllocateActivityPartition(?individualD) ^ inPartition(?individualE, ?individualD) ^ uml:ControlFlow(?individualE) ^ edge(?individualF, ?individualE) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 4,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Verify|uml:Abstraction] Unnamed -> [uml:Activity|TestCase] Verify Sensor Resolution -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [uml:ControlFlow] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [Block|uml:Class] Test Operator"
            }
        ]
    },
    {
        "id": 115,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Satisfy(?individualB) ^ client(?individualB, ?individualC) ^ ValueProperty(?individualC) ^ type(?individualC, ?individualD) ^ ValueType(?individualD) ^ type(?individualE, ?individualD) ^ ValueProperty(?individualE) ^ redefinedProperty(?individualE, ?individualF) ^ ValueProperty(?individualF) ^ ownedAttribute(?individualG, ?individualF) ^ hardware(?individualG) -> relation(?individualA, ?individualG)",
        "count": 4,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] resolution -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] field of view -> [ValueProperty|uml:Property] field of view -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] resolution -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] field of view -> [ValueProperty|uml:Property] field of view -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] resolution -> [ValueProperty|uml:Property] resolution -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] field of view -> [ValueProperty|uml:Property] field of view -> [hardware|Block|uml:Class] Camera"
            }
        ]
    },
    {
        "id": 116,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Satisfy(?individualB) ^ client(?individualB, ?individualC) ^ uml:Operation(?individualC) ^ ownedOperation(?individualD, ?individualC) ^ hardware(?individualD) -> relation(?individualA, ?individualD)",
        "count": 2,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Satisfy|uml:Abstraction] Unnamed -> [uml:Operation] sense thermal emissions -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Satisfy|uml:Abstraction] Unnamed -> [uml:Operation] sense thermal emissions -> [hardware|Block|uml:Class] Camera"
            }
        ]
    },
    {
        "id": 117,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:State(?individualC) ^ source(?individualD, ?individualC) ^ uml:Transition(?individualD) ^ transition(?individualE, ?individualD) ^ uml:Region(?individualE) ^ region(?individualF, ?individualE) ^ uml:StateMachine(?individualF) ^ ownedBehavior(?individualG, ?individualF) ^ hardware(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [uml:State] on -> [uml:Transition] Unnamed -> [uml:Region] Unnamed -> [uml:StateMachine] Payload Sensor States -> [hardware|Block|uml:Class] Camera"
            }
        ]
    },
    {
        "id": 118,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:State(?individualC) ^ source(?individualD, ?individualC) ^ uml:Transition(?individualD) ^ transition(?individualE, ?individualD) ^ uml:Region(?individualE) ^ region(?individualF, ?individualE) ^ uml:StateMachine(?individualF) ^ classifierBehavior(?individualG, ?individualF) ^ hardware(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [uml:State] on -> [uml:Transition] Unnamed -> [uml:Region] Unnamed -> [uml:StateMachine] Payload Sensor States -> [hardware|Block|uml:Class] Camera"
            }
        ]
    },
    {
        "id": 119,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:State(?individualC) ^ target(?individualD, ?individualC) ^ uml:Transition(?individualD) ^ transition(?individualE, ?individualD) ^ uml:Region(?individualE) ^ region(?individualF, ?individualE) ^ uml:StateMachine(?individualF) ^ ownedBehavior(?individualG, ?individualF) ^ hardware(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [uml:State] on -> [uml:Transition] Unnamed -> [uml:Region] Unnamed -> [uml:StateMachine] Payload Sensor States -> [hardware|Block|uml:Class] Camera"
            }
        ]
    },
    {
        "id": 120,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:State(?individualC) ^ target(?individualD, ?individualC) ^ uml:Transition(?individualD) ^ transition(?individualE, ?individualD) ^ uml:Region(?individualE) ^ region(?individualF, ?individualE) ^ uml:StateMachine(?individualF) ^ classifierBehavior(?individualG, ?individualF) ^ hardware(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [uml:State] on -> [uml:Transition] Unnamed -> [uml:Region] Unnamed -> [uml:StateMachine] Payload Sensor States -> [hardware|Block|uml:Class] Camera"
            }
        ]
    },
    {
        "id": 121,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:State(?individualC) ^ doActivity(?individualC, ?individualD) ^ uml:Activity(?individualD) ^ behavior(?individualE, ?individualD) ^ uml:CallBehaviorAction(?individualE) ^ result(?individualE, ?individualF) ^ uml:OutputPin(?individualF) ^ type(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 2,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [uml:State] on -> [uml:Activity] Sense Thermal Emissions -> [uml:CallBehaviorAction] Unnamed -> [uml:OutputPin] Unnamed -> [Block|uml:Class] Payload Sensor Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [uml:State] on -> [uml:Activity] Sense Thermal Emissions -> [uml:CallBehaviorAction] Unnamed -> [uml:OutputPin] Unnamed -> [Block|uml:Class] Payload Sensor Data"
            }
        ]
    },
    {
        "id": 122,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:State(?individualC) ^ doActivity(?individualC, ?individualD) ^ uml:Activity(?individualD) ^ behavior(?individualE, ?individualD) ^ uml:CallBehaviorAction(?individualE) ^ argument(?individualE, ?individualF) ^ uml:InputPin(?individualF) ^ type(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 2,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [uml:State] on -> [uml:Activity] Sense Thermal Emissions -> [uml:CallBehaviorAction] Unnamed -> [uml:InputPin] Unnamed -> [Block|uml:Class] Sensor CMD"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [uml:State] on -> [uml:Activity] Sense Thermal Emissions -> [uml:CallBehaviorAction] Unnamed -> [uml:InputPin] Unnamed -> [Block|uml:Class] Sensor CMD"
            }
        ]
    },
    {
        "id": 123,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:State(?individualC) ^ doActivity(?individualC, ?individualD) ^ uml:Activity(?individualD) ^ behavior(?individualE, ?individualD) ^ uml:CallBehaviorAction(?individualE) ^ inPartition(?individualE, ?individualF) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ hardware(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [uml:State] on -> [uml:Activity] Sense Thermal Emissions -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [hardware|Block|uml:Class] Camera"
            }
        ]
    },
    {
        "id": 124,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:State(?individualC) ^ doActivity(?individualC, ?individualD) ^ uml:Activity(?individualD) ^ behavior(?individualE, ?individualD) ^ uml:CallBehaviorAction(?individualE) ^ inPartition(?individualE, ?individualF) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ subsystem(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [uml:State] on -> [uml:Activity] Sense Thermal Emissions -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [subsystem|Block|uml:Class] Payload Subsystem"
            }
        ]
    },
    {
        "id": 125,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:State(?individualC) ^ doActivity(?individualC, ?individualD) ^ uml:Activity(?individualD) ^ behavior(?individualE, ?individualD) ^ uml:CallBehaviorAction(?individualE) ^ node(?individualF, ?individualE) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ hardware(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [uml:State] on -> [uml:Activity] Sense Thermal Emissions -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [hardware|Block|uml:Class] Camera"
            }
        ]
    },
    {
        "id": 126,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:State(?individualC) ^ doActivity(?individualC, ?individualD) ^ uml:Activity(?individualD) ^ behavior(?individualE, ?individualD) ^ uml:CallBehaviorAction(?individualE) ^ node(?individualF, ?individualE) ^ AllocateActivityPartition(?individualF) ^ represents(?individualF, ?individualG) ^ subsystem(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [uml:State] on -> [uml:Activity] Sense Thermal Emissions -> [uml:CallBehaviorAction] Unnamed -> [AllocateActivityPartition|uml:ActivityPartition] Unnamed -> [subsystem|Block|uml:Class] Payload Subsystem"
            }
        ]
    },
    {
        "id": 127,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:State(?individualC) ^ doActivity(?individualC, ?individualD) ^ uml:Activity(?individualD) ^ client(?individualE, ?individualD) ^ Allocate(?individualE) ^ supplier(?individualE, ?individualF) ^ hardware(?individualF) -> relation(?individualA, ?individualF)",
        "count": 2,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [uml:State] on -> [uml:Activity] Sense Thermal Emissions -> [Allocate|uml:Abstraction] Unnamed -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [uml:State] on -> [uml:Activity] Sense Thermal Emissions -> [Allocate|uml:Abstraction] Unnamed -> [hardware|Block|uml:Class] Camera"
            }
        ]
    },
    {
        "id": 128,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:State(?individualC) ^ doActivity(?individualC, ?individualD) ^ uml:Activity(?individualD) ^ node(?individualD, ?individualE) ^ uml:ActivityParameterNode(?individualE) ^ parameter(?individualE, ?individualF) ^ uml:Parameter(?individualF) ^ type(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 2,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [uml:State] on -> [uml:Activity] Sense Thermal Emissions -> [uml:ActivityParameterNode] Unnamed -> [uml:Parameter] Unnamed -> [Block|uml:Class] Payload Sensor Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [uml:State] on -> [uml:Activity] Sense Thermal Emissions -> [uml:ActivityParameterNode] Unnamed -> [uml:Parameter] Unnamed -> [Block|uml:Class] Sensor CMD"
            }
        ]
    },
    {
        "id": 129,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:State(?individualC) ^ doActivity(?individualC, ?individualD) ^ uml:Activity(?individualD) ^ node(?individualD, ?individualE) ^ uml:ActivityParameterNode(?individualE) ^ type(?individualE, ?individualF) ^ Block(?individualF) -> relation(?individualA, ?individualF)",
        "count": 2,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [uml:State] on -> [uml:Activity] Sense Thermal Emissions -> [uml:ActivityParameterNode] Unnamed -> [Block|uml:Class] Payload Sensor Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [uml:State] on -> [uml:Activity] Sense Thermal Emissions -> [uml:ActivityParameterNode] Unnamed -> [Block|uml:Class] Sensor CMD"
            }
        ]
    },
    {
        "id": 130,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:State(?individualC) ^ doActivity(?individualC, ?individualD) ^ uml:Activity(?individualD) ^ ownedParameter(?individualD, ?individualE) ^ uml:Parameter(?individualE) ^ parameter(?individualF, ?individualE) ^ uml:ActivityParameterNode(?individualF) ^ type(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 2,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [uml:State] on -> [uml:Activity] Sense Thermal Emissions -> [uml:Parameter] Unnamed -> [uml:ActivityParameterNode] Unnamed -> [Block|uml:Class] Payload Sensor Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [uml:State] on -> [uml:Activity] Sense Thermal Emissions -> [uml:Parameter] Unnamed -> [uml:ActivityParameterNode] Unnamed -> [Block|uml:Class] Sensor CMD"
            }
        ]
    },
    {
        "id": 131,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:State(?individualC) ^ doActivity(?individualC, ?individualD) ^ uml:Activity(?individualD) ^ ownedParameter(?individualD, ?individualE) ^ uml:Parameter(?individualE) ^ type(?individualE, ?individualF) ^ Block(?individualF) -> relation(?individualA, ?individualF)",
        "count": 2,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [uml:State] on -> [uml:Activity] Sense Thermal Emissions -> [uml:Parameter] Unnamed -> [Block|uml:Class] Payload Sensor Data"
            },
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [uml:State] on -> [uml:Activity] Sense Thermal Emissions -> [uml:Parameter] Unnamed -> [Block|uml:Class] Sensor CMD"
            }
        ]
    },
    {
        "id": 132,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:State(?individualC) ^ doActivity(?individualC, ?individualD) ^ uml:Activity(?individualD) ^ client(?individualE, ?individualD) ^ Allocate(?individualE) ^ supplier(?individualE, ?individualF) ^ subsystem(?individualF) -> relation(?individualA, ?individualF)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [uml:State] on -> [uml:Activity] Sense Thermal Emissions -> [Allocate|uml:Abstraction] Unnamed -> [subsystem|Block|uml:Class] Payload Subsystem"
            }
        ]
    },
    {
        "id": 133,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:State(?individualC) ^ doActivity(?individualC, ?individualD) ^ uml:Activity(?individualD) ^ client(?individualE, ?individualD) ^ Allocate(?individualE) ^ supplier(?individualE, ?individualF) ^ Block(?individualF) -> relation(?individualA, ?individualF)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [uml:State] on -> [uml:Activity] Sense Thermal Emissions -> [Allocate|uml:Abstraction] Unnamed -> [Block|uml:Class|system_of_interest] Spacecraft-Physical"
            }
        ]
    },
    {
        "id": 134,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:State(?individualC) ^ subvertex(?individualD, ?individualC) ^ uml:Region(?individualD) ^ region(?individualE, ?individualD) ^ uml:StateMachine(?individualE) ^ ownedBehavior(?individualF, ?individualE) ^ hardware(?individualF) -> relation(?individualA, ?individualF)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [uml:State] on -> [uml:Region] Unnamed -> [uml:StateMachine] Payload Sensor States -> [hardware|Block|uml:Class] Camera"
            }
        ]
    },
    {
        "id": 135,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:State(?individualC) ^ subvertex(?individualD, ?individualC) ^ uml:Region(?individualD) ^ region(?individualE, ?individualD) ^ uml:StateMachine(?individualE) ^ classifierBehavior(?individualF, ?individualE) ^ hardware(?individualF) -> relation(?individualA, ?individualF)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [uml:State] on -> [uml:Region] Unnamed -> [uml:StateMachine] Payload Sensor States -> [hardware|Block|uml:Class] Camera"
            }
        ]
    },
    {
        "id": 136,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:State(?individualC) ^ constrainedElement(?individualD, ?individualC) ^ uml:Constraint(?individualD) ^ constrainedElement(?individualD, ?individualE) ^ hardware(?individualE) -> relation(?individualA, ?individualE)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [uml:State] on -> [uml:Constraint] power -> [hardware|Block|uml:Class] Camera"
            }
        ]
    },
    {
        "id": 137,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:State(?individualC) ^ constrainedElement(?individualD, ?individualC) ^ uml:Constraint(?individualD) ^ ownedRule(?individualE, ?individualD) ^ hardware(?individualE) -> relation(?individualA, ?individualE)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [uml:State] on -> [uml:Constraint] power -> [hardware|Block|uml:Class] Camera"
            }
        ]
    },
    {
        "id": 138,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ ValueProperty(?individualC) ^ type(?individualC, ?individualD) ^ ValueType(?individualD) ^ type(?individualE, ?individualD) ^ ValueProperty(?individualE) ^ redefinedProperty(?individualF, ?individualE) ^ ValueProperty(?individualF) ^ ownedAttribute(?individualG, ?individualF) ^ hardware(?individualG) -> relation(?individualA, ?individualG)",
        "count": 2,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] resolution -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] field of view -> [ValueProperty|uml:Property] field of view -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] resolution -> [ValueProperty|uml:Property] resolution -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            }
        ]
    },
    {
        "id": 139,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:Operation(?individualC) ^ ownedOperation(?individualD, ?individualC) ^ hardware(?individualD) -> relation(?individualA, ?individualD)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] MTF -> [Refine|uml:Abstraction] Unnamed -> [uml:Operation] sense thermal emissions -> [hardware|Block|uml:Class] Camera"
            }
        ]
    },
    {
        "id": 140,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Satisfy(?individualB) ^ client(?individualB, ?individualC) ^ ValueProperty(?individualC) ^ redefinedProperty(?individualC, ?individualD) ^ ValueProperty(?individualD) ^ redefinedProperty(?individualD, ?individualE) ^ ValueProperty(?individualE) ^ ownedAttribute(?individualF, ?individualE) ^ hardware(?individualF) -> relation(?individualA, ?individualF)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [ValueProperty|uml:Property] field of view -> [ValueProperty|uml:Property] field of view -> [hardware|Block|uml:Class] Camera"
            }
        ]
    },
    {
        "id": 141,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ ValueProperty(?individualC) ^ redefinedProperty(?individualC, ?individualD) ^ ValueProperty(?individualD) ^ definingFeature(?individualE, ?individualD) ^ uml:Slot(?individualE) ^ slot(?individualF, ?individualE) ^ uml:InstanceSpecification(?individualF) ^ classifier(?individualF, ?individualG) ^ hardware(?individualG) -> relation(?individualA, ?individualG)",
        "count": 2,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [ValueProperty|uml:Property] field of view -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] analysis Context.icq analysis.camera Parameters Analysis.payload Subsystem.partProperty7 -> [hardware|Block|uml:Class] Camera"
            },
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [ValueProperty|uml:Property] field of view -> [uml:Slot] Unnamed -> [uml:InstanceSpecification] camera Parameters Analysis.payload Subsystem.partProperty -> [hardware|Block|uml:Class] Camera"
            }
        ]
    },
    {
        "id": 142,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ ValueProperty(?individualC) ^ redefinedProperty(?individualC, ?individualD) ^ ValueProperty(?individualD) ^ redefinedProperty(?individualE, ?individualD) ^ ValueProperty(?individualE) ^ ownedAttribute(?individualF, ?individualE) ^ hardware(?individualF) -> relation(?individualA, ?individualF)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [ValueProperty|uml:Property] field of view -> [ValueProperty|uml:Property] field of view -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            }
        ]
    },
    {
        "id": 143,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ ValueProperty(?individualC) ^ redefinedProperty(?individualC, ?individualD) ^ ValueProperty(?individualD) ^ ownedAttribute(?individualE, ?individualD) ^ hardware(?individualE) -> relation(?individualA, ?individualE)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [ValueProperty|uml:Property] field of view -> [hardware|Block|uml:Class] Camera"
            }
        ]
    },
    {
        "id": 144,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ ValueProperty(?individualC) ^ redefinedProperty(?individualC, ?individualD) ^ ValueProperty(?individualD) ^ type(?individualD, ?individualE) ^ ValueType(?individualE) ^ type(?individualF, ?individualE) ^ ValueProperty(?individualF) ^ ownedAttribute(?individualG, ?individualF) ^ hardware(?individualG) -> relation(?individualA, ?individualG)",
        "count": 3,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [ValueProperty|uml:Property] field of view -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] field of view -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [ValueProperty|uml:Property] field of view -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] resolution -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            },
            {
                "path_representation": "[uml:Class|Requirement] Field of View -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] field of view -> [ValueProperty|uml:Property] field of view -> [ValueType|uml:DataType] milliradian -> [ValueProperty|uml:Property] resolution -> [hardware|Block|uml:Class] Camera"
            }
        ]
    },
    {
        "id": 145,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Satisfy(?individualB) ^ client(?individualB, ?individualC) ^ ValueProperty(?individualC) ^ redefinedProperty(?individualC, ?individualD) ^ ValueProperty(?individualD) ^ type(?individualD, ?individualE) ^ ValueType(?individualE) ^ type(?individualF, ?individualE) ^ ValueProperty(?individualF) ^ ownedAttribute(?individualG, ?individualF) ^ subsystem(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Data Rate -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] data rate -> [ValueProperty|uml:Property] data rate -> [ValueType|uml:DataType] 4 -> [ValueProperty|uml:Property] Data rate -> [subsystem|Block|uml:Class] DTS Subsystem"
            }
        ]
    },
    {
        "id": 146,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Satisfy(?individualB) ^ client(?individualB, ?individualC) ^ ValueProperty(?individualC) ^ type(?individualC, ?individualD) ^ ValueType(?individualD) ^ type(?individualE, ?individualD) ^ ValueProperty(?individualE) ^ ownedAttribute(?individualF, ?individualE) ^ subsystem(?individualF) -> relation(?individualA, ?individualF)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Data Rate -> [Satisfy|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] data rate -> [ValueType|uml:DataType] 4 -> [ValueProperty|uml:Property] Data rate -> [subsystem|Block|uml:Class] DTS Subsystem"
            }
        ]
    },
    {
        "id": 147,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ ValueProperty(?individualC) ^ redefinedProperty(?individualD, ?individualC) ^ ValueProperty(?individualD) ^ type(?individualD, ?individualE) ^ ValueType(?individualE) ^ type(?individualF, ?individualE) ^ ValueProperty(?individualF) ^ ownedAttribute(?individualG, ?individualF) ^ subsystem(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Data Rate -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] data rate -> [ValueProperty|uml:Property] data rate -> [ValueType|uml:DataType] 4 -> [ValueProperty|uml:Property] Data rate -> [subsystem|Block|uml:Class] DTS Subsystem"
            }
        ]
    },
    {
        "id": 148,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ ValueProperty(?individualC) ^ type(?individualC, ?individualD) ^ ValueType(?individualD) ^ type(?individualE, ?individualD) ^ ValueProperty(?individualE) ^ ownedAttribute(?individualF, ?individualE) ^ subsystem(?individualF) -> relation(?individualA, ?individualF)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Data Rate -> [Refine|uml:Abstraction] Unnamed -> [ValueProperty|uml:Property] data rate -> [ValueType|uml:DataType] 4 -> [ValueProperty|uml:Property] Data rate -> [subsystem|Block|uml:Class] DTS Subsystem"
            }
        ]
    },
    {
        "id": 149,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:Port(?individualC) ^ ownedAttribute(?individualD, ?individualC) ^ hardware(?individualD) -> relation(?individualA, ?individualD)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Electrical Interface -> [Refine|uml:Abstraction] Unnamed -> [uml:Port] sensor data i/f -> [hardware|Block|uml:Class] Camera"
            }
        ]
    },
    {
        "id": 150,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:Port(?individualC) ^ informationSource(?individualD, ?individualC) ^ uml:InformationFlow(?individualD) ^ realizingConnector(?individualD, ?individualE) ^ uml:Connector(?individualE) ^ ownedConnector(?individualF, ?individualE) ^ subsystem(?individualF) -> relation(?individualA, ?individualF)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Electrical Interface -> [Refine|uml:Abstraction] Unnamed -> [uml:Port] sensor data i/f -> [uml:InformationFlow] flow for Payload Sensor Data -> [uml:Connector] Unnamed -> [subsystem|Block|uml:Class] Payload Subsystem"
            }
        ]
    },
    {
        "id": 151,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:Port(?individualC) ^ informationSource(?individualD, ?individualC) ^ uml:InformationFlow(?individualD) ^ informationTarget(?individualD, ?individualE) ^ uml:Port(?individualE) ^ ownedAttribute(?individualF, ?individualE) ^ hardware(?individualF) -> relation(?individualA, ?individualF)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Electrical Interface -> [Refine|uml:Abstraction] Unnamed -> [uml:Port] sensor data i/f -> [uml:InformationFlow] flow for Payload Sensor Data -> [uml:Port] sensor data if -> [hardware|Block|uml:Class] Signal Processor"
            }
        ]
    },
    {
        "id": 152,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:Port(?individualC) ^ informationSource(?individualD, ?individualC) ^ uml:InformationFlow(?individualD) ^ conveyed(?individualD, ?individualE) ^ Block(?individualE) -> relation(?individualA, ?individualE)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Electrical Interface -> [Refine|uml:Abstraction] Unnamed -> [uml:Port] sensor data i/f -> [uml:InformationFlow] flow for Payload Sensor Data -> [Block|uml:Class] Payload Sensor Data"
            }
        ]
    },
    {
        "id": 153,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:Port(?individualC) ^ role(?individualD, ?individualC) ^ NestedConnectorEnd(?individualD) ^ propertyPath(?individualD, ?individualE) ^ PartProperty(?individualE) ^ ownedAttribute(?individualF, ?individualE) ^ subsystem(?individualF) -> relation(?individualA, ?individualF)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Electrical Interface -> [Refine|uml:Abstraction] Unnamed -> [uml:Port] sensor data i/f -> [uml:ConnectorEnd|NestedConnectorEnd] Unnamed -> [PartProperty|uml:Property] Unnamed -> [subsystem|Block|uml:Class] Payload Subsystem"
            }
        ]
    },
    {
        "id": 154,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:Port(?individualC) ^ role(?individualD, ?individualC) ^ NestedConnectorEnd(?individualD) ^ propertyPath(?individualD, ?individualE) ^ PartProperty(?individualE) ^ type(?individualE, ?individualF) ^ hardware(?individualF) -> relation(?individualA, ?individualF)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Electrical Interface -> [Refine|uml:Abstraction] Unnamed -> [uml:Port] sensor data i/f -> [uml:ConnectorEnd|NestedConnectorEnd] Unnamed -> [PartProperty|uml:Property] Unnamed -> [hardware|Block|uml:Class] Camera"
            }
        ]
    },
    {
        "id": 155,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:Port(?individualC) ^ role(?individualD, ?individualC) ^ NestedConnectorEnd(?individualD) ^ propertyPath(?individualD, ?individualE) ^ PartProperty(?individualE) ^ redefinedProperty(?individualF, ?individualE) ^ ReferenceProperty(?individualF) ^ ownedAttribute(?individualG, ?individualF) ^ subsystem(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Electrical Interface -> [Refine|uml:Abstraction] Unnamed -> [uml:Port] sensor data i/f -> [uml:ConnectorEnd|NestedConnectorEnd] Unnamed -> [PartProperty|uml:Property] Unnamed -> [ReferenceProperty|uml:Property] unit-under-test -> [subsystem|Block|uml:Class] Payload Subsystem"
            }
        ]
    },
    {
        "id": 156,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:Port(?individualC) ^ role(?individualD, ?individualC) ^ NestedConnectorEnd(?individualD) ^ propertyPath(?individualD, ?individualE) ^ PartProperty(?individualE) ^ redefinedProperty(?individualF, ?individualE) ^ ReferenceProperty(?individualF) ^ type(?individualF, ?individualG) ^ hardware(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Electrical Interface -> [Refine|uml:Abstraction] Unnamed -> [uml:Port] sensor data i/f -> [uml:ConnectorEnd|NestedConnectorEnd] Unnamed -> [PartProperty|uml:Property] Unnamed -> [ReferenceProperty|uml:Property] unit-under-test -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            }
        ]
    },
    {
        "id": 157,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:Port(?individualC) ^ role(?individualD, ?individualC) ^ NestedConnectorEnd(?individualD) ^ end(?individualE, ?individualD) ^ uml:Connector(?individualE) ^ realizingConnector(?individualF, ?individualE) ^ uml:InformationFlow(?individualF) ^ conveyed(?individualF, ?individualG) ^ Block(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Electrical Interface -> [Refine|uml:Abstraction] Unnamed -> [uml:Port] sensor data i/f -> [uml:ConnectorEnd|NestedConnectorEnd] Unnamed -> [uml:Connector] Unnamed -> [uml:InformationFlow] flow for Payload Sensor Data -> [Block|uml:Class] Payload Sensor Data"
            }
        ]
    },
    {
        "id": 158,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:Port(?individualC) ^ role(?individualD, ?individualC) ^ NestedConnectorEnd(?individualD) ^ end(?individualE, ?individualD) ^ uml:Connector(?individualE) ^ ownedConnector(?individualF, ?individualE) ^ subsystem(?individualF) -> relation(?individualA, ?individualF)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Electrical Interface -> [Refine|uml:Abstraction] Unnamed -> [uml:Port] sensor data i/f -> [uml:ConnectorEnd|NestedConnectorEnd] Unnamed -> [uml:Connector] Unnamed -> [subsystem|Block|uml:Class] Payload Subsystem"
            }
        ]
    },
    {
        "id": 159,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:Port(?individualC) ^ role(?individualD, ?individualC) ^ NestedConnectorEnd(?individualD) ^ partWithPort(?individualD, ?individualE) ^ PartProperty(?individualE) ^ ownedAttribute(?individualF, ?individualE) ^ subsystem(?individualF) -> relation(?individualA, ?individualF)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Electrical Interface -> [Refine|uml:Abstraction] Unnamed -> [uml:Port] sensor data i/f -> [uml:ConnectorEnd|NestedConnectorEnd] Unnamed -> [PartProperty|uml:Property] Unnamed -> [subsystem|Block|uml:Class] Payload Subsystem"
            }
        ]
    },
    {
        "id": 160,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:Port(?individualC) ^ role(?individualD, ?individualC) ^ NestedConnectorEnd(?individualD) ^ partWithPort(?individualD, ?individualE) ^ PartProperty(?individualE) ^ type(?individualE, ?individualF) ^ hardware(?individualF) -> relation(?individualA, ?individualF)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Electrical Interface -> [Refine|uml:Abstraction] Unnamed -> [uml:Port] sensor data i/f -> [uml:ConnectorEnd|NestedConnectorEnd] Unnamed -> [PartProperty|uml:Property] Unnamed -> [hardware|Block|uml:Class] Camera"
            }
        ]
    },
    {
        "id": 161,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:Port(?individualC) ^ role(?individualD, ?individualC) ^ NestedConnectorEnd(?individualD) ^ partWithPort(?individualD, ?individualE) ^ PartProperty(?individualE) ^ redefinedProperty(?individualF, ?individualE) ^ ReferenceProperty(?individualF) ^ ownedAttribute(?individualG, ?individualF) ^ subsystem(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Electrical Interface -> [Refine|uml:Abstraction] Unnamed -> [uml:Port] sensor data i/f -> [uml:ConnectorEnd|NestedConnectorEnd] Unnamed -> [PartProperty|uml:Property] Unnamed -> [ReferenceProperty|uml:Property] unit-under-test -> [subsystem|Block|uml:Class] Payload Subsystem"
            }
        ]
    },
    {
        "id": 162,
        "rule": "Requirement(?individualA) ^ supplier(?individualB, ?individualA) ^ Refine(?individualB) ^ client(?individualB, ?individualC) ^ uml:Port(?individualC) ^ role(?individualD, ?individualC) ^ NestedConnectorEnd(?individualD) ^ partWithPort(?individualD, ?individualE) ^ PartProperty(?individualE) ^ redefinedProperty(?individualF, ?individualE) ^ ReferenceProperty(?individualF) ^ type(?individualF, ?individualG) ^ hardware(?individualG) -> relation(?individualA, ?individualG)",
        "count": 1,
        "paths": [
            {
                "path_representation": "[uml:Class|Requirement] Electrical Interface -> [Refine|uml:Abstraction] Unnamed -> [uml:Port] sensor data i/f -> [uml:ConnectorEnd|NestedConnectorEnd] Unnamed -> [PartProperty|uml:Property] Unnamed -> [ReferenceProperty|uml:Property] unit-under-test -> [hardware|Block|uml:Class] Mid-Range IR Scanner"
            }
        ]
    }
]